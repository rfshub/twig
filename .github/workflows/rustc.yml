name: Rust CI

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            arch: amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            arch: arm64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            arch: arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            arch: amd64 # arch is not used for macos, but good for consistency
          - target: aarch64-apple-darwin
            os: macos-latest
            arch: arm64 # arch is not used for macos, but good for consistency

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This is the magic step that enables arm64 emulation
      - name: Run on ARCH
        uses: uraimo/run-on-arch-action@v1.2.0
        if: ${{ matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest' }}
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu22.04 # You can choose other ubuntu versions
          # Run all subsequent steps inside the emulated environment
          run: |
            # 1. Install dependencies inside the arm64 environment
            sudo apt-get update
            sudo apt-get install -y build-essential curl pkg-config libssl-dev musl-tools

            # 2. Install Rust toolchain
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup target add ${{ matrix.target }}

            # 3. Build natively
            if [[ "${{ matrix.target }}" == *"-musl" ]]; then
              cargo build --release --target=${{ matrix.target }} --no-default-features --features musl-vendored
            else
              cargo build --release --target=${{ matrix.target }}
            fi

      # These steps run only for x86_64 Linux and macOS builds
      - name: Setup and Build for x86/macOS
        if: ${{ !(matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest') }}
        run: |
          # Install dependencies for x86 linux
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update
            sudo apt install -y build-essential pkg-config libssl-dev musl-tools
          fi

          # Install Rust toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          rustup target add ${{ matrix.target }}
          # Build
          if [[ "${{ matrix.target }}" == *"-musl" ]]; then
            cargo build --release --target=${{ matrix.target }} --no-default-features --features musl-vendored
          else
            cargo build --release --target=${{ matrix.target }}
          fi

      - name: Read crate metadata
        id: metadata
        run: |
          name=$(grep '^name =' Cargo.toml | head -n1 | sed 's/.*= "\(.*\)"/\1/')
          version=$(grep '^version =' Cargo.to